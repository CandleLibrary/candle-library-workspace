@IGNORE g:sp g:nl

<> testy > expression                   f:r { $sym1[0] }

<> expression > binary                  f:r { env.completeCaptures($sym1, env.globals) }

<> binary > unary op binary             f:r { ($sym3.unshift(...$sym1, ($sym2.captures = 2,  $sym2)), $sym3)  }
    | unary                            

<> unary > op unary                     f:r { [ $sym1, ...$sym2 ] }
    | id                                f:r { [ $sym1 ] }
    | \( expression \)                  f:r { $sym2 }
    | \{ id \, id \}                    f:r { [ { type:"range", start: $sym2, end:$sym4 } ] }

<> op > ( g:sym | g:id )(+\' ) g:sp?    f:r { { type:"op_ref", sym:$sym1, precedence:env.getPrecedence($sym1, env.globals), captures:1 } }

<> id > \$$ g:num                       f:r { parseInt($sym2) } 
