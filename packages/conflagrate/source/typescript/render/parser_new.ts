
import {
    ParserFramework,
    KernelParserCore2,
    fillByteBufferWithUTF8FromString
} from "@candlelib/hydrocarbon/build/library/entry/runtime.js";


const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore2;

const token_sequence_lookup = new Uint8Array([
    123, 58, 125, 64, 63, 46, 46, 46, 92, 109, 58, 115, 111, 58, 115, 105, 58, 115, 91, 93, 44, 110, 111,
    116, 109, 58, 110, 111, 58, 110, 105, 58, 101, 111, 114
]);

const token_lookup = new Uint32Array([
    4063660, 384, 524672, 262528, 2097536, 1048960, 50230190, 132, 128, 136, 160, 16663468,
    16768, 392, 33551278, 16708526, 33452974, 386, 896, 4194688, 8388992, 16663470, 1416, 16779648,
    2432, 12672, 8576, 37618092, 16675758, 131500, 131456, 172, 416, 33554816, 104726956, 67109280,
    67109248, 428, 8, 32, 4, 50230188, 50229804
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2852126744, 1, 196616, 2147508242, 2147483665,
    2139103234, 2160074755, 2147524628, 2155880453, 2147500051, 2147516437, 2147483652,
    603979908, 603980633, 0, 2147483652, 603979908, 603980672, 0, 2147483652, 603979908,
    603980603, 0, 2147483652, 603979908, 603980392, 0, 2147483652, 603979908, 603980623,
    0, 2147483652, 603979908, 603980613, 0, 4026531840, 2852192261, 131073, 1, 2147483667,
    2147483659, 268435456, 1073747720, 805306379, 0, 4026531840, 2852192261, 196609, 1, 2147483666,
    2147483658, 268435456, 1073747464, 805306378, 0, 4026531840, 2852192261, 262145, 1, 2147483669,
    2147483661, 268435456, 1073748232, 805306381, 0, 4026531840, 2852192261, 327681, 1, 2147483668,
    2147483660, 268435456, 1073747976, 805306380, 0, 4026531840, 2852126726, 393217, 65539,
    2147483650, 2151682051, 2147491845, 603979872, 0, 603979884, 0, 603979896, 0, 1073746440,
    805306376, 0, 0, 603979874, 0, 2852192260, 458760, 1, 2147483650, 268435456, 1073747216,
    805306377, 0, 4026531840, 0, 603979886, 0, 2852192260, 589832, 1, 2147483651, 268435456,
    1073747216, 805306377, 0, 4026531840, 0, 603979898, 0, 2852192260, 655368, 1, 2147483653,
    268435456, 1073747216, 805306377, 0, 4026531840, 0, 2768240647, 0, 131079, 2164273156,
    2168461321, 2147483658, 2147483659, 2151677960, 2147483660, 2147483661, 805306372,
    3221225484, 0, 603979908, 603979856, 0, 0, 4026531840, 2852126760, 720897, 196620, 2147483665,
    2143346697, 2172657666, 2172657667, 2147532820, 2168463365, 2168471566, 2147557399,
    2147508242, 2147516435, 2147524629, 2147549206, 2147483650, 603980077, 603980633, 0,
    2147483650, 603980077, 603980672, 0, 2147483650, 603980077, 603979982, 0, 2147483650,
    603980077, 603979826, 0, 2147483650, 603980077, 603979816, 0, 2147483650, 603980077,
    603979836, 0, 2147483650, 603980077, 603979846, 0, 2147483650, 603980077, 603980214,
    0, 2147483650, 603980077, 603980762, 0, 2147483650, 603980077, 603980752, 0, 4026531840,
    2852192259, 786433, 1, 2147483662, 268435456, 603979990, 0, 4026531840, 2852192259, 851969,
    1, 2147483651, 268435456, 603979998, 0, 4026531840, 2852126732, 917505, 65539, 2155890704,
    2147493903, 2147483672, 2147483665, 268435456, 603980020, 603980790, 0, 268435456, 1073745176,
    805306374, 0, 268435456, 603980032, 0, 1073745680, 805306374, 0, 0, 2583691279, 983041,
    65540, 1073745432, 805306374, 0, 0, 268435456, 1073744928, 805306374, 0, 0, 2852126725,
    1048577, 1, 2147483672, 2147483666, 268435456, 603980044, 603980808, 0, 1073746200, 805306375,
    0, 1073745952, 805306375, 0, 2852192260, 1179649, 1, 2147483657, 2147483653, 268435456,
    603980224, 0, 4026531840, 0, 2852192261, 1245185, 1, 2147483670, 2147483662, 268435456,
    1073748488, 805306382, 0, 4026531840, 2852192261, 1310721, 1, 2147483671, 2147483663,
    268435456, 1073748744, 805306383, 0, 4026531840, 2768240647, 0, 196620, 2147483656, 2147489801,
    2172661762, 2147483659, 2147483660, 2164260869, 2164260870, 2164260871, 2147483658,
    2147483661, 2147483662, 2147483663, 805306370, 3221225489, 0, 603980077, 603979856,
    0, 0, 4026531840, 0, 2852126760, 720897, 196620, 2147483665, 2143305737, 2172657666, 2172657667,
    2147532820, 2168463365, 2168479758, 2147557399, 2147516434, 2147524627, 2147541013,
    2147549206, 2147483648, 603980182, 603980633, 0, 2147483648, 603980182, 603980672, 0,
    2147483648, 603980182, 603980047, 0, 2147483648, 603980182, 603979982, 0, 2147483648,
    603980182, 603979826, 0, 2147483648, 603980182, 603979816, 0, 2147483648, 603980182,
    603979846, 0, 2147483648, 603980182, 603979836, 0, 2147483648, 603980182, 603980057,
    0, 2147483648, 603980182, 603980067, 0, 4026531840, 2852126723, 1376257, 196620, 2147483665,
    2143289353, 2172649474, 2172649475, 2147483668, 2168455173, 2168455182, 2147483671,
    2147483666, 2147483667, 2147483669, 2147483670, 603980179, 603979926, 0, 1073742088,
    805306368, 0, 0, 1073742608, 805306369, 0, 2768240654, 0, 196622, 2181064704, 2181058561,
    2181050370, 2147483659, 2147483660, 2172649477, 2172649478, 2172649479, 2147483656,
    2147489801, 2147483658, 2147483661, 2147483662, 2147483663, 805306370, 3221225491,
    0, 603980182, 603979856, 0, 1073742344, 805306369, 3221225498, 0, 603980182, 603980157,
    0, 0, 4026531840, 2852192260, 1179649, 1, 2147483657, 2147483653, 268435456, 603980224,
    0, 4026531840, 0, 2852126726, 1441793, 65538, 2147483658, 2147489795, 268435456, 603980236,
    0, 268435456, 603980318, 0, 4026531840, 2852192259, 851969, 1, 2147483651, 268435456,
    603980244, 0, 4026531840, 2852126729, 1507329, 65538, 2147483672, 2147493899, 2147483664,
    268435456, 603980260, 603980772, 0, 268435456, 603980294, 603980489, 0, 4026531840, 0,
    2852192260, 1572865, 1, 2147483659, 268435456, 603980270, 603980489, 0, 4026531840, 0,
    2852126728, 1638401, 65538, 2147483660, 2147491853, 268435456, 603980284, 603980489,
    0, 268435456, 1073743416, 805306373, 0, 4026531840, 2852192260, 1703937, 1, 2147483661,
    268435456, 1073742920, 805306373, 0, 4026531840, 0, 2852126728, 1638401, 65538, 2147483660,
    2147491853, 268435456, 603980308, 603980489, 0, 268435456, 1073743664, 805306373, 0,
    4026531840, 2852192260, 1703937, 1, 2147483661, 268435456, 1073743168, 805306373, 0,
    4026531840, 0, 2852126729, 1507329, 65538, 2147483672, 2147493899, 2147483664, 268435456,
    603980334, 603980772, 0, 268435456, 603980368, 603980489, 0, 4026531840, 0, 2852192260,
    1572865, 1, 2147483659, 268435456, 603980344, 603980489, 0, 4026531840, 0, 2852126728,
    1638401, 65538, 2147483660, 2147491853, 268435456, 603980358, 603980489, 0, 268435456,
    1073744432, 805306373, 0, 4026531840, 2852192260, 1703937, 1, 2147483661, 268435456,
    1073743936, 805306373, 0, 4026531840, 0, 2852126728, 1638401, 65538, 2147483660, 2147491853,
    268435456, 603980382, 603980489, 0, 268435456, 1073744680, 805306373, 0, 4026531840,
    2852192260, 1703937, 1, 2147483661, 268435456, 1073744184, 805306373, 0, 4026531840,
    0, 2852192261, 196609, 1, 2147483666, 2147483658, 268435456, 1073747464, 805306378, 0,
    4026531840, 2852126744, 1, 196616, 2147500050, 2147483665, 2139103234, 2160074755, 2147516436,
    2155880453, 2147508243, 2147524629, 2147483651, 603980457, 603980633, 0, 2147483651,
    603980457, 603980672, 0, 2147483651, 603980457, 603979826, 0, 2147483651, 603980457,
    603979816, 0, 2147483651, 603980457, 603979846, 0, 2147483651, 603980457, 603979836,
    0, 4026531840, 2852126723, 1769473, 196616, 2147483666, 2147483665, 2139095042, 2160066563,
    2147483668, 2155872261, 2147483667, 2147483669, 603980454, 603979780, 0, 4026531840,
    0, 1073742608, 805306371, 0, 3087008451, 2768240653, 0, 196616, 2147483656, 2147489801,
    2147483658, 2160087043, 2160078852, 2147483661, 2147483659, 2147483660, 805306372,
    3221225486, 0, 603980457, 603979856, 0, 1073742344, 805306371, 3221225493, 0, 603980457,
    603980438, 0, 4026531840, 2499805187, 0, 65537, 4026531840, 0, 0, 2852126760, 720897, 196620,
    2147483665, 2143305737, 2172657666, 2172657667, 2147532820, 2168463365, 2168479758,
    2147557399, 2147516434, 2147524627, 2147541013, 2147549206, 2147483649, 603980565,
    603980633, 0, 2147483649, 603980565, 603980672, 0, 2147483649, 603980565, 603980047,
    0, 2147483649, 603980565, 603979982, 0, 2147483649, 603980565, 603979826, 0, 2147483649,
    603980565, 603979816, 0, 2147483649, 603980565, 603979846, 0, 2147483649, 603980565,
    603979836, 0, 2147483649, 603980565, 603980057, 0, 2147483649, 603980565, 603980067,
    0, 4026531840, 2852126723, 1835009, 196620, 2147483665, 2143289353, 2172649474, 2172649475,
    2147483668, 2168455173, 2168455182, 2147483671, 2147483666, 2147483667, 2147483669,
    2147483670, 603980179, 603979926, 0, 4026531840, 0, 3087008565, 2768240653, 0, 196621,
    2147483656, 2176864257, 2176856066, 2147483659, 2147483660, 2168455173, 2168455174,
    2168455175, 2147489801, 2147483658, 2147483661, 2147483662, 2147483663, 805306370,
    3221225491, 0, 603980565, 603979856, 0, 1073742344, 805306369, 3221225498, 0, 603980565,
    603980545, 0, 4026531840, 0, 2499805185, 0, 65537, 4026531840, 0, 0, 2852192261, 131073,
    1, 2147483667, 2147483659, 268435456, 1073747720, 805306379, 0, 4026531840, 2852192261,
    327681, 1, 2147483668, 2147483660, 268435456, 1073747976, 805306380, 0, 4026531840, 2852192261,
    262145, 1, 2147483669, 2147483661, 268435456, 1073748232, 805306381, 0, 4026531840, 2852126728,
    1900545, 131076, 2147483665, 2143297541, 2147491842, 2147491843, 2147483656, 603980662,
    603980649, 0, 2147483656, 603980662, 603980672, 0, 4026531840, 2852192260, 1966081, 1,
    2147483665, 268435456, 603980659, 603980890, 0, 4026531840, 0, 1073746704, 805306376,
    0, 2768240644, 0, 65538, 2147489800, 2147483657, 603980662, 603979856, 0, 0, 4026531840,
    2852126732, 2031624, 65539, 2147483650, 2151686147, 2147500037, 2147483657, 603980736,
    603980692, 0, 2147483657, 603980736, 603980702, 0, 2147483657, 603980736, 603980712,
    0, 4026531840, 0, 2852192260, 458760, 1, 2147483650, 268435456, 1073746952, 805306377,
    0, 4026531840, 0, 2852192260, 589832, 1, 2147483651, 268435456, 1073746952, 805306377,
    0, 4026531840, 0, 2852192260, 655368, 1, 2147483653, 268435456, 1073746952, 805306377,
    0, 4026531840, 0, 2852126726, 393217, 65539, 2147483650, 2151682051, 2147491845, 603979872,
    0, 603979884, 0, 603979896, 0, 4026531840, 0, 3087008714, 2499805193, 0, 65539, 4026531840,
    0, 0, 603980736, 603980722, 0, 2499805193, 0, 65537, 4026531840, 0, 0, 2852192261, 1310721,
    1, 2147483671, 2147483663, 268435456, 1073748744, 805306383, 0, 4026531840, 2852192261,
    1245185, 1, 2147483670, 2147483662, 268435456, 1073748488, 805306382, 0, 4026531840,
    2852192259, 2097153, 1, 2147483653, 268435456, 603980780, 0, 4026531840, 2852192260,
    2162689, 1, 2147483673, 268435456, 1073749016, 805306384, 0, 4026531840, 0, 2852192259,
    2097153, 1, 2147483653, 268435456, 603980798, 0, 4026531840, 2852192260, 2162689, 1, 2147483673,
    268435456, 1073749016, 805306385, 0, 4026531840, 0, 2852126725, 1, 196616, 2147487762,
    2147487761, 2139099138, 2160070659, 2147487764, 2155872261, 2147487763, 2147487765,
    603980826, 0, 603980870, 603980402, 0, 4026531840, 0, 2785017860, 2228225, 196618, 2185236498,
    2176847889, 2139099138, 2160070659, 2147487764, 2155876357, 2147487763, 2147487765,
    2147487769, 2147483674, 603980844, 0, 603980867, 0, 4026531840, 2852192261, 2293761,
    1, 2147483653, 2147483668, 268435456, 603980854, 603980880, 0, 4026531840, 603980857,
    603980402, 0, 2852192260, 2162689, 1, 2147483673, 268435456, 1073749280, 805306386, 0,
    4026531840, 0, 603980870, 603980402, 0, 2852192260, 2162689, 1, 2147483673, 268435456,
    1073749528, 805306386, 0, 4026531840, 0, 2852192260, 2359297, 1, 2147483674, 268435456,
    1073750032, 805306388, 0, 4026531840, 0, 2852126736, 1900545, 131076, 2147483665, 2143305733,
    2147508226, 2147491843, 2147483667, 603981050, 603980914, 0, 2147483667, 603981050,
    603980934, 0, 2147483667, 603981050, 603980944, 0, 2147483667, 603981050, 603980954,
    0, 4026531840, 2852192259, 1966081, 1, 2147483665, 268435456, 603980922, 0, 4026531840,
    2852126724, 2424833, 65539, 2147483650, 2151677955, 2147483653, 268435456, 1073746960,
    805306387, 0, 4026531840, 0, 2852192260, 2490368, 1, 2147483651, 268435456, 1073746952,
    805306387, 0, 4026531840, 0, 2852192260, 2555904, 1, 2147483653, 268435456, 1073746952,
    805306387, 0, 4026531840, 0, 2852192260, 2621440, 1, 2147483650, 268435456, 1073746952,
    805306387, 0, 4026531840, 0, 2852126728, 393217, 131076, 2147483665, 2143297541, 2147495938,
    2147487747, 603980980, 0, 603981014, 0, 603981026, 0, 603981038, 0, 4026531840, 2785017859,
    1900545, 131076, 2147487761, 2143289349, 2147483650, 2147483651, 603980992, 0, 4026531840,
    4026531840, 0, 603980994, 0, 2852192259, 2686977, 1, 2147483665, 268435456, 603981002,
    0, 4026531840, 2852126724, 2424833, 65539, 2147483650, 2151677955, 2147483653, 268435456,
    1073749784, 805306387, 0, 4026531840, 0, 603981016, 0, 2852192260, 2752512, 1, 2147483651,
    268435456, 1073747216, 805306387, 0, 4026531840, 0, 603981028, 0, 2852192260, 2752512,
    1, 2147483653, 268435456, 1073747216, 805306387, 0, 4026531840, 0, 603981040, 0, 2852192260,
    2752512, 1, 2147483650, 268435456, 1073747216, 805306387, 0, 4026531840, 0, 3087009028,
    2499805203, 0, 65539, 4026531840, 0, 0, 603981050, 603980964, 0, 2499805203, 0, 65537, 4026531840,
    0, 0
]);

function isTokenActive(token_id, row) { var index = (row) + (token_id >> 5);; var shift = 1 << (31 & (token_id));; return (token_lookup[index] & shift) != 0; }

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 44:
            { if (l.get_byte_at(l.byte_offset) == 44) { if (isTokenActive(26, tk_row)) { l.setToken(26, 1, 1); } } } break; case 46:
            { if (l.get_byte_at(l.byte_offset) == 46) { if (isTokenActive(16, tk_row) && 2 == compare(l, l.byte_offset + 1, 6, 2, token_sequence_lookup)) { l.setToken(16, 3, 3); } } } break; case 58:
            { if (l.get_byte_at(l.byte_offset) == 58) { if (isTokenActive(11, tk_row)) { l.setToken(11, 1, 1); } } } break; case 63:
            { if (l.get_byte_at(l.byte_offset) == 63) { if (isTokenActive(15, tk_row)) { l.setToken(15, 1, 1); } } } break; case 64:
            { if (l.get_byte_at(l.byte_offset) == 64) { if (isTokenActive(14, tk_row)) { l.setToken(14, 1, 1); } } } break; case 91:
            { if (l.get_byte_at(l.byte_offset) == 91) { if (isTokenActive(24, tk_row)) { l.setToken(24, 1, 1); } } } break; case 92:
            { if (l.get_byte_at(l.byte_offset) == 92) { if (isTokenActive(17, tk_row)) { l.setToken(17, 1, 1); } } } break; case 93:
            { if (l.get_byte_at(l.byte_offset) == 93) { if (isTokenActive(25, tk_row)) { l.setToken(25, 1, 1); } } } break; case 105:
            { if (l.get_byte_at(l.byte_offset) == 105) { if (l.get_byte_at(l.byte_offset + 1) == 58) { if (l.get_byte_at(l.byte_offset + 2) == 115) { if (isTokenActive(22, tk_row)) { l.setToken(22, 3, 3); } } else if (l.get_byte_at(l.byte_offset + 2) == 101) { if (isTokenActive(23, tk_row)) { l.setToken(23, 3, 3); } } } } } break; case 109:
            { if (l.get_byte_at(l.byte_offset) == 109) { if (l.get_byte_at(l.byte_offset + 1) == 58) { if (l.get_byte_at(l.byte_offset + 2) == 115) { if (isTokenActive(18, tk_row)) { l.setToken(18, 3, 3); } } else if (l.get_byte_at(l.byte_offset + 2) == 110) { if (isTokenActive(20, tk_row)) { l.setToken(20, 3, 3); } } } } } break; case 110:
            { if (l.get_byte_at(l.byte_offset) == 110) { if (2 == compare(l, l.byte_offset + 1, 22, 2, token_sequence_lookup)) { if (isTokenActive(10, tk_row)) { l.setToken(10, 3, 3); }; if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) { l._type = 3; } } } } break; case 111:
            { if (l.get_byte_at(l.byte_offset) == 111) { if (l.get_byte_at(l.byte_offset + 1) == 58) { if (l.get_byte_at(l.byte_offset + 2) == 115) { if (isTokenActive(19, tk_row)) { l.setToken(19, 3, 3); } } else if (l.get_byte_at(l.byte_offset + 2) == 110) { if (isTokenActive(21, tk_row)) { l.setToken(21, 3, 3); } } } else if (l.get_byte_at(l.byte_offset + 1) == 114) { if (isTokenActive(12, tk_row)) { l.setToken(12, 2, 2); }; if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) { l._type = 3; } } } } break; case 123:
            { if (l.get_byte_at(l.byte_offset) == 123) { if (isTokenActive(9, tk_row)) { l.setToken(9, 1, 1); } } } break; case 125:
            { if (l.get_byte_at(l.byte_offset) == 125) { if (isTokenActive(13, tk_row)) { l.setToken(13, 1, 1); } } } break; default:
            break;
    }; if (((l._type) > 0)) return;; if (isTokenActive(0, tk_row) && false) { l._type = 0; return; } else if (isTokenActive(8, tk_row) && l.isSP(true)) { l._type = 8; return; } else if (isTokenActive(3, tk_row) && l.isUniID()) { l._type = 3; return; } else if (isTokenActive(2, tk_row) && l.isSym(true)) { l._type = 2; return; } else if (isTokenActive(7, tk_row) && l.isNL()) { l._type = 7; return; } else if (isTokenActive(5, tk_row) && l.isNum()) { l._type = 5; return; }
}

function scan(l, token, skip) { if (((l._type) <= 0)) scan_core(l, token);; if ((skip > 0 && isTokenActive(l._type, skip))) { while ((isTokenActive(l._type, skip))) { l.next(); scan_core(l, token); } } }

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array((string.length + 1) * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67109189; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};


const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ((rules => (state) => rules.map(r => r(state)).join(""))(sym[0] || [])) /*0*/,
(env, sym, pos) => ([sym[0]]) /*1*/,
(env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*2*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[2], sym[5], sym[7] || [], sym[3], !!sym[1])) /*3*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[2], sym[4], sym[6] || [], !!sym[1])) /*4*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[2], sym[5], null || [], sym[3], !!sym[1])) /*5*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[2], sym[4], null || [], !!sym[1])) /*6*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[1], sym[4], sym[6] || [], sym[2], !!null)) /*7*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[1], sym[3], sym[5] || [], !!null)) /*8*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[1], sym[4], null || [], sym[2], !!null)) /*9*/,
(env, sym, pos) => ((({ emptyProp }, flag, rules, alt_rules, index, NOT) => (state) => (+(!emptyProp(state, flag, index)) ^ +NOT) ? rules.map(r => r(state)).join("") : alt_rules.map(r => r(state)).join(""))(env, sym[1], sym[3], null || [], !!null)) /*10*/,
(env, sym, pos) => ((({ propertyToString }, prop, index, optional) => (state) => propertyToString(state, prop, index, optional))(env, sym[1], parseInt(sym[2] || "0"), !!sym[3])) /*11*/,
(env, sym, pos) => ((({ propertyToString }, prop, index, optional) => (state) => propertyToString(state, prop, index, optional))(env, sym[1], parseInt(null || "0"), !!sym[2])) /*12*/,
(env, sym, pos) => ((({ propertyToString }, prop, index, optional) => (state) => propertyToString(state, prop, index, optional))(env, sym[1], parseInt(sym[2] || "0"), !!null)) /*13*/,
(env, sym, pos) => ((({ propertyToString }, prop, index, optional) => (state) => propertyToString(state, prop, index, optional))(env, sym[1], parseInt(null || "0"), !!null)) /*14*/,
(env, sym, pos) => ((({ propertyToString }, prop, index, delimiter) => (state) => propertyToString(state, prop, index, true, delimiter))(env, sym[1], -sym[3][0] || Infinity, sym[3][1] || undefined)) /*15*/,
(env, sym, pos) => ((({ propertyToString }, prop, index, delimiter) => (state) => propertyToString(state, prop, index, true, delimiter))(env, sym[1], Infinity, undefined)) /*16*/,
(env, sym, pos) => ((({ addLiteral }, _) => (state) => addLiteral(state, _))(env, sym[0])) /*17*/,
(env, sym, pos) => ((({ addLiteral }, _) => (state) => addLiteral(state, _))(env, sym[1])) /*18*/,
(env, sym, pos) => (sym[0] + "") /*19*/,
(env, sym, pos) => (sym[0] + sym[1]) /*20*/,
(env, sym, pos) => ((({ addSpace }) => (state) => addSpace(state, false))(env)) /*21*/,
(env, sym, pos) => ((({ addSpace }) => (state) => addSpace(state, true))(env)) /*22*/,
(env, sym, pos) => ((({ addNewLine }) => (state) => addNewLine(state, false))(env)) /*23*/,
(env, sym, pos) => ((({ addNewLine }) => (state) => addNewLine(state, true))(env)) /*24*/,
(env, sym, pos) => ((({ increaseIndent }) => (state) => increaseIndent(state, true))(env)) /*25*/,
(env, sym, pos) => ((({ decreaseIndent }) => (state) => decreaseIndent(state, true))(env)) /*26*/,
(env, sym, pos) => (sym[1]) /*27*/,
(env, sym, pos) => ([sym[1], sym[2]]) /*28*/,
(env, sym, pos) => ([null, sym[1]]) /*29*/,
(env, sym, pos) => (sym[0] + sym[2]) /*30*/,
(env, sym, pos) => (sym[0]) /*31*/];

export default ParserFramework(
    reduce_functions,
    {
        render: 0,
    },
    js_parser_pack,

);

