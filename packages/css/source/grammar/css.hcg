##############################################################################################
##############################################################################################
#### CSS ######
##############################################################################################
##############################################################################################

@IGNORE g:nl g:sp tk:comment

@IMPORT default-productions as def

@EXPORT CSS as css
@EXPORT declaration_list as properties
@EXPORT declaration as property
@EXPORT COMPLEX_SELECTOR as selector
@EXPORT STYLE_RULE as rule


<> CSS > STYLE_SHEET                                                            

<> STYLE_SHEET >  ( STYLE_RULE | AT_RULE )(*)     

                                                    f:r { { t_Stylesheet, c_RuleParent, rules:$1, tok } }

<> STYLE_RULE > ( COMPLEX_SELECTOR f:r { { t_Selector, val:$1 } } )(+\, ) \{ declaration_list? \}   

                                                    f:r { { t_Rule, selectors:$1, properties: $3, tok, parent: c_RuleParent } }

<> RULE_BODY > STYLE_RULE(*)

<> AT_RULE > media            
                                                    f:r { $1 }
    | import ;?          
                                                    f:r { $1 }
    | keyframes          
                                                    f:r { $1 }
    | supports           
                                                    f:r { $1 }
    | charset ;?           
                                                    f:r { $1 }
    | fontface ;?           
                                                    f:r { $1 }
    | unknown_at_rule ;?           
                                                    f:r { $1 }


##############################################################################################
##############################################################################################
#### At Rules
##############################################################################################
##############################################################################################

##############################################################################################
# Top Level Declarations - BEGIN

<> fontface >  \@font-face { declaration_list? }  

                                                    f:r { { t_FontFace, descriptors:$3, tok } }

<> keyframes > \@keyframes keyframes_name { keyframes_blocks(+) }         

                                                    f:r { { t_Keyframes, name:$3, keyframes:$4, tok, parent:c_RuleParent } }

<> supports > \@supports supports_condition { RULE_BODY? }     

                                                    f:r { { t_Supports, c_RuleParent, condition:$2, rules:$4, tok, parent:c_RuleParent } }

<> import >    \@import ( string | url ) ( t:supports \( ( supports_condition | import_declaration f:r{ [$1] } ) \) f:r{$3} )? media_query(*\, )  

                                                    f:r { { t_Import, uri:$2, condition:$3, media:$4, tok } }

<> charset > \@charset string                       f:r { { t_CharSet, value:$2, tok } }

<> media >  \@media media_queries { RULE_BODY? }       
                                                    f:r { { t_Media, c_RuleParent, queries:$2, rules:$4, tok } }

# Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/@page

<> page >  \@page page_selector? { declaration_list? }       
                                                    f:r { { t_Page, selector:$2, rules:$4, tok } }
# adapted from https://www.w3.org/TR/css-cascade-4/#at-import

<> unknown_at_rule > \@ tk:ident unknown_block?

                                                    f:r { { t_UnknownAtRule, name:str($2), value:str($4), tok } }

# Top Level Declarations - END
##############################################################################################


# @KEY-FRAMES --------------------------------------------------------------------------------
# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes

<> keyframes_name > ident | string

<> keyframes_blocks > keyframe_selector(+\, ) { declaration_list? }      

                                                    f:r { { t_KeyframeBlock, selectors:$1, properties:$3, tok } }

<> keyframe_selector > t:from                       f:r { { t_KeyframeSelector, val:{ t_KeyFrameTo }, tok } }
    | t:to                                          f:r { { t_KeyframeSelector, val:{ t_KeyFrameFrom }, tok } }
    | percentage                                    f:r { { t_KeyframeSelector, val:$1, tok } }    

# @SUPPORTS --------------------------------------------------------------------------------
# reference: https://developer.mozilla.org/en-US/docs/Web/CSS/@supports

<> supports_condition > t:not supports_in_parens    f:r { [ { t_Not, supports:$2, tok } ] }

    | ( supports_in_parens  f:r { [$1] } )

        ( 
                t:and supports_in_parens                                                 
                                                    f:r { { t_And, supports:$2, tok } }
            |   t:or supports_in_parens 
                                                    f:r { { t_Or, supports:$2, tok } }
        )(*) 
                                                    f:r { $1 + $2 }                                              

<> supports_in_parens > \( supports_condition \)                                
                                                    f:r { { t_SupportsParenthesis, supports:$2, tok } }
    | supports_feature

    | general_enclosed

<> supports_feature > supports_selector 

    | supports_decl 

<> supports_decl > \( declaration \)

                                                    f:r { { t_SupportDeclaration, declaration:$2, tok } }

<> supports_selector >  t:selector \( COMPLEX_SELECTOR \)

                                                    f:r { { t_SupportsSelector, selectors:$3, tok } }

# @MEDIA ---------------------------------------------------------------------------------
# reference: https://developer.mozilla.org/en-US/docs/Web/CSS/@media#Formal_syntax

<> media_queries > media_query(+\, ) 

<> media_query > media_condition                                                
                                                    f:r { { t_Condition, condition:$1, tok } }  

    | (t:not | t:only )? media_type ( t:and media_not )?      

                                                    f:r { { t_Type, modifier:str($1), val: $2, and:$3, tok } }

<> media_condition > media_or

<> media_or > media_or t:or media_and
                                                    f:r { { t_MediaOr, left:$1, right:$2, tok } }
    | media_and

<> media_not > t:not media_in_parenths              f:r { { t_MediaNot, media:$2, tok } }

    | media_and

<> media_and > media_and t:and media_in_parenths
                                                    f:r { { t_MediaAnd, left:$1, right:$2, tok } }
    | media_in_parenths

<> media_not > t:not media_in_parenths              f:r { { t_MediaNot, media:$2, tok } }

    | media_or

<> media_in_parenths > \( media_condition \)        f:r { { t_MediaParenthesis, media:$2, tok } }        
    | media_feature
    | general_enclosed

<> media_feature > \( ( mf_plain | boolean | mf_range ) \)                   
                                                    f:r { { t_MediaFeature, feature:$2, tok } }

<> general_enclosed > tk:ident_token \( ( g:sym | g:id  | g:sp )(*\" ) \)                            
                                        
                                                    f:r { { t_MediaFunction, name:$1, value:str($3), tok } }

<> mf_plain > mf_name \: mf_value                   f:r { { t_MediaValue, key:$1, val:$3, tok } }   

<> mf_range > mf_name ( < | \<= | > | \>= | = ) mf_value         

                                                    f:r { {t_MediaEquality, sym:$2, left:$1, right:$3, tok } } 

    | mf_value ( < | \<= | > | \>= | = ) mf_name                

                                                    f:r { {t_MediaEquality, sym:$2, left:$1, right:$3, tok } }  

    | mf_value ( > | \>= ) tk:ident_token ( > | \>= ) mf_value        

                                                    f:r { {t_MediaRangeDescending, sym1:$2, sym2:$4, max:$1, id:$3, min:$5, tok } } 

    | mf_value ( < | \<= ) tk:ident_token ( < | \<= ) mf_value    

                                                    f:r { {t_MediaRangeAscending, sym1:$2, sym2:$4, min:$1, id:$3, max:$5, tok } } 


<> mf_value > number 
    | dimension 
    | mf_name 
    | ratio

<> mf_name > tk:ident_token                         f:r { { t_MediaName, val:$1, tok } }  

<> media_type > tk:ident_token                      f:r { { t_MediaType, val:$1, tok } }  


# @PAGE ----------------------------------------------------------------------------------

<> page_selector > ( pseudo_page )(+)
    | tk:ident_token ( pseudo_page )(*)   

<> pseudo_page > \: ( t:left | t:right | t:first | t:blank )

# UNKNOWN -------------------------------------------------------------------------------

<> unknown_block > \{ ( g:ws | g:num | g:nl | g:sym | g:id | unknown_block )(*) \}

<> import_declaration > declaration

#########################################################################################
# Primitives


<> boolean > t:true                                                           
                                                    f:r { { t_Boolean, val:true, tok, tok } }
    | t:false                                                                    
                                                    f:r { { t_Boolean, val:false, tok, tok } }                                                                

<> ratio > number \/ number                                                         
                                                    f:r { { t_Ratio, numerator:$1, denominator:$3, tok } }

<> percentage > tk:scientific_token \%                                                          
                                                    f:r { { t_Percentage, value:str($1), tok } }

<> dimension > number ( g:id | g:ids )  
                                                    f:r { { t_Length, value:$1, unit:str($2), tok } }

<> url >  t:url \( string \)                                                     
                                                    f:r { { t_URL, value:str($3), tok } }     



<> string > " ( g:id | g:sym | g:num | g:sp | \\" )(*\" ) "

                                                        f:r { { t_String, value:str($2), tok } } 

    | ' ( g:id | g:sym | g:num | g:sp | \\' )(*\" ) '  

                                                    f:r { { t_String, value:str($2), tok } } 

<> number > tk:scientific_token                     f:r { { t_Number, val:f64($1), tok } }

<> float_token > g:num ( \. g:num )?

<> scientific_token > float_token ( ( t:e | t:E ) \- ? g:num )?

<> ident > tk:ident_token                           f:r { { t_Identifier, val:str($1), tok } }

<> custom_ident > tk:ident_token 

<> ident_token > ( g:id | \- | \_ ) ( g:id | \- | \_ | g:num | ( \\ g:sym ) )(*)

<> escaped_hex > \\ [ hex_digit? hex_digit? hex_digit? hex_digit? hex_digit? hex_digit? ]

<> hex_digit > \0 | \1 | \2 | \3 | \4 | \5 | \6 | \7 | \8 | \9 | \a | \b | \c | \d | \e | \f | \A | \B | \C | \D | \E | \F

##############################################################################################
#### Selectors
#### Modified from https://drafts.csswg.org/selectors-4/#grammar
##############################################################################################


<> COMPLEX_SELECTOR >   COMPLEX_SELECTOR ( ( ( \> | \+ | \~ | \|| )  f:r { { t_Combinator, val:$1 } } )? COMPOUND_SELECTOR f:r{ $1 + [{ t_CompoundSelector, selectors:$2 }] } )(+)
    
                                                    f:r { $1 + $2 } 

    | COMPOUND_SELECTOR                             f:r { [{ t_CompoundSelector, selectors:$1 }] } 

<> COMPOUND_SELECTOR >  
    [
        TYPE_SELECTOR? 
        (SUBCLASS_SELECTOR)(*) 
        ( 
            PSEUDO_ELEMENT_SELECTOR ( (RST g:sp) PSEUDO_CLASS_SELECTOR )(*)    

            f:r { [$1] + $2 }   
        )(*) 
    ] ( ?=g:sp | ?=\{ | ?=\) )
                                                    f:r { [$1] + $2 + $3 }                                     



<> SUBCLASS_SELECTOR > ID_SELECTOR 
    | CLASS_SELECTOR 
    | ATTRIBUTE_SELECTOR 
    | PSEUDO_CLASS_SELECTOR

<> ID_SELECTOR >\#  (RST g:sp)  tk:ident_token          f:r { { t_IdSelector, c_B_SPECIFIER, id:str($2), tok, precedence: 0 } } 

<> CLASS_SELECTOR > \. (RST g:sp)  tk:ident_token       f:r { { t_ClassSelector, class:str($2), tok, precedence:0, c_C_SPECIFIER } } 

<> PSEUDO_CLASS_SELECTOR >  \:  (RST g:sp) tk:ident_token ( \( psuedo_class_value \) f:r {$2} )?       

                                                        f:r { { t_PseudoClassSelector, id:$2, val:$3, tok, precedence:0, c_C_SPECIFIER } }

<> PSEUDO_ELEMENT_SELECTOR > \:: (RST g:sp)  tk:ident_token ( \( psuedo_class_value \) f:r {$2} )?                 

                                                        f:r { { t_PseudoElementSelector, id:$2, val:$3, tok, precedence:0, c_D_SPECIFIER } }

    
<>  ATTRIBUTE_SELECTOR >  \[ WQ_NAME \]                 f:r { { t_AttributeSelector, name:$2, tok, precedence:0, c_C_SPECIFIER } } 

    | \[ WQ_NAME ( \~= | \^= | \$= | \*= | \= ) ( ident | string ) ( t:i | t:s )? \] 

                                                        f:r { { t_AttributeSelector, name:$2, match_type:$3, match_val:$4, mod:$5, tok, precedence:0, c_C_SPECIFIER } }   

<> TYPE_SELECTOR >  WQ_NAME                             f:r { { t_TypeSelector, c_D_SPECIFIER, name:$1, tok  } }

    | NS_PREFIX? \*                                     f:r { { t_TypeSelector, name:{ t_QualifiedName, namespace:$1, name:"*", tok, precedence: 0 }, tok } } 

<> WQ_NAME >  NS_PREFIX? tk:ident_token                 f:r { { t_QualifiedName, namespace:$1, name:str($2), tok } }

<> NS_PREFIX >  ( tk:ident_token | \* ) \|              f:r { str($1) }


##############################################################################################
#### Declarations
##############################################################################################

<> declaration_list >  ( declaration )(+\; )
    
<> declaration > tk:declaration_id \: declaration_values_sentineled \!important ?    
                                                                                
                                                    f:r { { t_Property, name:str($1), value:str($3), important: bool($4) } }

<[recover declaration]
    scan until [ \} \; ] 
    then reduce f:r { { t_InvalidProperty, tok, val:sym } } 
    then set prod to declaration
>

<> declaration_values_sentineled > declaration_values ( ?=\} | ?=\; | ?=\!important | ?=g:nl ) f:r { str(tok) }

<> declaration_values > declaration_value

    | declaration_values \( declaration_values \)                               

    | declaration_values declaration_value                                    

<> declaration_value > g:id | g:sym | g:num  |g:sp 

##############################################################################################
#### Primitives
##############################################################################################

<> identifier > tk:ident_token                                                 

<> declaration_id > tk:ident_token

<> css_id_symbols > css_id_symbols (RST g:sp g:nl)  g:id                            
    | css_id_symbols (RST g:sp g:nl)  \_                                           
    | css_id_symbols (RST g:sp g:nl)  \-                                            
    | css_id_symbols (RST g:sp g:nl)  g:num       
    | g:id
    | \-

<> psuedo_class_value >  ( g:id | g:sym | g:num | g:sp )(+\" ) 

#############################################################################################
#### Comments
#############################################################################################

<> comment > \/*  ( g:id | g:sym | g:num | g:sp )(*) \*/
