
/* **** DO NOT MODIFY **** DO NOT MODIFY **** DO NOT MODIFY ****
 * 
 * This code has been automatically generated by Hydrocarbon Toolkit
 * 
 * ###################################################################
 * 
 * Copyright 2021 Anthony C. Weathersby
 * 
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 */


import {
    ASTNode,
    ByteReader,
    ByteWriter,
    Token,
    Deserialize as InternalDeserialize,
    SerializeType,
    SerializeVector,
    SerializeStructVector
} from "@hctoolkit/runtime";


export function Deserialize(reader: ByteReader){
    return InternalDeserialize(reader, DeserializeStruct)
}

function DeserializeStruct(reader: ByteReader): ASTNode<ASTType>{
    switch(reader.peek_byte()){
        
    }
    throw new Error("Could not deserialize");
}


/**
```

```*/
function _FN0_ (args: any[], tok: Token) : any {  let v6 = args.pop();
let v5 = args.pop();
let v4 = args.pop();
let v3 = args.pop();
let v2 = args.pop();
let v1 = args.pop();
let v0 = args.pop();
 args.push(v6); }
/**
```

```*/
function _FN1_ (args: any[], tok: Token) : any {  let v5 = args.pop();
let v4 = args.pop();
let v3 = args.pop();
let v2 = args.pop();
let v1 = args.pop();
let v0 = args.pop();
 args.push(v5); }
/**
```

```*/
function _FN2_ (args: any[], tok: Token) : any {  let v4 = args.pop();
let v3 = args.pop();
let v2 = args.pop();
let v1 = args.pop();
let v0 = args.pop();
 args.push(v4); }
/**
```

```*/
function _FN3_ (args: any[], tok: Token) : any {  let v3 = args.pop();
let v2 = args.pop();
let v1 = args.pop();
let v0 = args.pop();
 args.push(v3); }
/**
```

```*/
function _FN4_ (args: any[], tok: Token) : any {  let v2 = args.pop();
let v1 = args.pop();
let v0 = args.pop();
 args.push(v2); }
/**
```

```*/
function _FN5_ (args: any[], tok: Token) : any {  let v1 = args.pop();
let v0 = args.pop();
 args.push(v1); }
/**
```

```*/
function _FN6_ (args: any[], tok: Token) : any {}



export  const FunctionMaps = [
    _FN0_,
_FN1_,
_FN2_,
_FN3_,
_FN4_,
_FN5_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
_FN6_,
];
